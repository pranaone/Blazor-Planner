@page "/auth/login"
@layout AuthLayout
@using BlazorPlanner.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider
<div class="row">
    <div class="col-12">
        <h2> Login to your account </h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">

            <Radzen.Blazor.RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />

                <DataAnnotationsValidator />

                <ValidationSummary />

                <label> Email </label>
                <Radzen.Blazor.RadzenTextBox @bind-Value="model.Email"></Radzen.Blazor.RadzenTextBox>

                <label> Password </label>
                <Radzen.Blazor.RadzenPassword @bind-Value="model.Password"></Radzen.Blazor.RadzenPassword>

                <hr />
                <Radzen.Blazor.RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                                            ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                                            Disabled="isBusy" />
                <Radzen.Blazor.RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Register"
                                            ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                                            Disabled="isBusy" Click="GotoRegister" />

            </Radzen.Blazor.RadzenCard>

        </EditForm>
    </div>
</div>

@code {

    LoginRequest model = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    Dictionary<string, string> userInfo = new Dictionary<string, string>();

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
         
            var userInfo = new BlazorPlanner.Client.Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier]
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;

    }

    void GotoRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
