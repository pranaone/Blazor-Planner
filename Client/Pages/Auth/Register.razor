@page "/auth/register"
@layout AuthLayout
@using BlazorPlanner.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager 

<div class="row">
    <div class="col-12">
        <h2> Create a new account </h2>
        <EditForm Model="model"  OnSubmit="RegisterUser">
            
            <Radzen.Blazor.RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType"/>
                
                <DataAnnotationsValidator/>
                
                <ValidationSummary/>

                <label> First Name </label>
                <Radzen.Blazor.RadzenTextBox @bind-Value="model.FirstName"></Radzen.Blazor.RadzenTextBox>

                <label> Last Name </label>
                <Radzen.Blazor.RadzenTextBox @bind-Value="model.LastName"></Radzen.Blazor.RadzenTextBox>

                <label> Email </label>
                <Radzen.Blazor.RadzenTextBox @bind-Value="model.Email"></Radzen.Blazor.RadzenTextBox>

                <label> Password </label>
                <Radzen.Blazor.RadzenPassword @bind-Value="model.Password"></Radzen.Blazor.RadzenPassword>

                <label> Confirm Password </label>
                <Radzen.Blazor.RadzenPassword @bind-Value="model.ConfirmPassword"></Radzen.Blazor.RadzenPassword>
                <hr />
                <Radzen.Blazor.RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Register"
                                            ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2" 
                                            Disabled="isBusy"/>
                <Radzen.Blazor.RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                                            ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" 
                                            Disabled="isBusy"/>

            </Radzen.Blazor.RadzenCard>
           
        </EditForm>    
    </div>
</div>

@code {
    RegisterRequest model = new RegisterRequest();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;
    public async Task RegisterUser()
    {
        isBusy = true;
        var result = await authService.RegisterUserAsync(model);
        if (result.IsSuccess)
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;

    }
}
